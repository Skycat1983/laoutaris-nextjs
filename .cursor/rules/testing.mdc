---
description: Guidelines for writing tests
globs: **/*.test.tsx, **/*.test.ts
---


# Testing Structure Guidelines

## File Organization
- Every component and its test file should be in their own dedicated folder
- The exception to this rule is page.tsx and layout.tsx files, which should share a single folder, according to their corresponding path in the app router
- Test files should be adjacent to the component they test
- Follow this structure:
```
├── app
│   ├── page.tsx
│   ├── page.test.tsx
│   ├── layout.tsx
│   ├── layout.test.tsx
│   ├── examplePath
│   │   ├── page.tsx
│   │   ├── page.test.tsx
│   │   ├── layout.tsx
│   │   ├── layout.test.tsx
│
├── components
│   ├── Home
│   │   ├── Home.tsx
│   │   ├── Home.test.tsx
│   ├── Button
│   │   ├── Button.ts
│   │   ├── Button.test.ts
│
├── utils
│   ├── formatDate
│   │   ├── formatDate.ts
│   │   ├── formatDate.test.ts

```



## Import Paths
- Use absolute imports with @ notation for all component imports in tests:

```typescript
typescript
// ✅ Correct
jest.mock("@/components/ui/hero/Hero", ...)
jest.mock("@/lib/api/articleApi", ...)
// ❌ Avoid relative paths
jest.mock("../../ui/hero/Hero", ...)
```

## Component Requirements
- Add data-testid to testable elements in components:


## Test File Structure
- Each test file should include:
  1. Imports
  2. Mocks for child components and external services
  3. Test groups using describe()
  4. Individual test cases with clear purposes

```typescript
import { render, screen } from "@testing-library/react";
import { ComponentName } from "./ComponentName";
// Mock dependencies
jest.mock("@/components/child/Component", ...);
describe("ComponentName", () => {
// Setup test data if needed
const mockData = {...};
beforeEach(() => {
jest.clearAllMocks();
});
// Test cases with clear comments
it("renders without crashing", () => {
// Test implementation
});
it("handles error states correctly", () => {
// Test implementation
});
});
```

## Test Comments
- Each test group should have a clear purpose
- Each test case should have a concise comment explaining what it tests
- Complex test setups should be explained with inline comments

```typescript
describe("HomeBiographySection", () => {
// Tests basic render functionality
it("renders biography cards in correct order", () => {});
// Tests error handling and edge cases
it("shows fallback UI when no articles available", () => {});
// Tests user interactions
it("navigates to article when card clicked", () => {});
});
```

[jest.config.js](mdc:jest.config.js)
[jest.setup.js](mdc:jest.setup.js)





