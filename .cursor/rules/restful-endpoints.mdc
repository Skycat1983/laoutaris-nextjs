---
description: Guidelines for building/consuming restful endpoints
globs: src/app/api/v2/**/*.ts
---
# API Endpoint Blueprint

## Data Relationships Summary (for API Design):

- **Article:** References a user (author) and an artwork.
- **Artwork:** Belongs to one or more collections; referenced by users via watchlists and favourites.
- **Blog:** References a user (author) and contains comments.
- **Comment:** References a user (author) and links to a blog.
- **Collection:** Contains multiple artworks.
- **User:** Associated with comments, a watchlist (artworks), and favourites (artworks).

Using these guidelines, we can determine the appropriate endpoint based on the type of data to be fetched and the relationships to be populated, ensuring a consistent and predictable API design. This blueprint defines how endpoints are structured to reflect both the type of resource being returned and its associated relationships. For example:

- **Plural Endpoints:** `/v2/public/articles` returns multiple articles.
- **Dynamic Endpoints:** `/v2/public/article/[slug]` returns a single article identified by its slug.
- **Nested Endpoints:** `/v2/public/article/[slug]/artwork` returns a single article with its related artwork populated.
- The same pattern applies to collections, where `/v2/public/collections` returns multiple collections, `/v2/public/collection/[slug]` returns one collection, and `/v2/public/collections/[slug]/artwork` returns one collection with its artworks populated.

**Note on Admin vs. Public Endpoints:**  
Admin routes (under `/v2/admin`) fetch the complete data items, whereas GET requests made by users are sanitized, filtered, or limited by design for security and performance.

**Endpoint Variations and Flexibility:**  
Our naming convention inherently indicates:
- **Resource Quantity:**  
  Plural endpoints for lists and dynamic routes (e.g., `[slug]`) for single records.
- **Relationship Inclusion:**  
  Nested endpoints (e.g., `/artwork`, `/comments`) specify that related data should be populated.
  
For example, in theory:
- `/v2/public/collections/artwork` could return multiple collections with all artworks populated.
- `/v2/public/collections/[slug]/artwork/[id]` might return a specific collection with only a single artwork populated.

This approach allows us to intuitively deduce which endpoints are possible and what they infer about the data relationships on our backend.

## Example Endpoint Tree Structure (v2 Folder):

```
└── v2
    ├── admin
    │   ├── article
    │   │   ├── create
    │   │   │   └── route.ts
    │   │   ├── delete
    │   │   │   └── route.ts
    │   │   ├── read
    │   │   │   └── route.ts
    │   │   └── update
    │   │       └── route.ts
    │   ├── artwork
    │   │   ├── create
    │   │   │   └── route.ts
    │   │   ├── list
    │   │   │   └── route.ts
    │   │   └── read
    │   │       └── route.ts
    │   ├── blog
    │   │   ├── create
    │   │   │   └── route.ts
    │   │   ├── delete
    │   │   │   └── route.ts
    │   │   ├── read
    │   │   │   └── route.ts
    │   │   └── update
    │   │       └── route.ts
    │   └── collection
    │       └── list
    │           └── route.ts
    ├── article
    │   ├── [slug]
    │   │   ├── artwork
    │   │   │   └── route.ts
    │   │   └── route.ts
    │   └── route.ts
    ├── blog
    │   ├── [slug]
    │   │   └── route.ts
    │   └── route.ts
    ├── blueprint.md
    ├── collection
    │   ├── [slug]
    │   │   ├── artwork
    │   │   │   └── route.ts
    │   │   └── route.ts
    │   └── route.ts
    ├── collections
    │   └── [slug]
    │       └── artworks
    │           └── route.ts
    └── navigation
        ├── articles
        │   └── [section]
        │       └── route.ts
        └── collections
            ├── [slug]
            │   ├── artworks
            │   │   └── route.ts
            │   └── route.ts
            └── route.ts

```



